
Feature / DB | PostgreSQL 🐘 | MySQL 🐬 | MongoDB 🍃
Type | Relational (SQL) | Relational (SQL) | Non-relational (NoSQL - Document)
Data Format | Tables (rows/columns) | Tables | JSON-like Documents (BSON)
Schema | Strict schema | Strict schema | Flexible, schema-less
ACID Compliance | Fully ACID-compliant | ACID (InnoDB engine) | Not fully ACID by default (has transactions since v4.0)
Best Use Cases | Complex apps, data analytics, GIS, financial systems | Web apps, CMS, basic transactional apps | High-volume, schema-less, real-time apps
Query Language | SQL + advanced features (window fx, CTEs) | SQL | Mongo Query Language (MQL – JSON style)
Joins Support | Full support | Full support | Limited (manual joins or $lookup)
Scaling | Vertical, some horizontal | Vertical, with some sharding tools | Built for horizontal scaling (sharding, replica sets)
Transactions | Fully supported | Supported (InnoDB only) | Multi-doc transactions since v4.0
Indexing | Advanced (GIN, GiST, B-tree, etc.) | B-tree, hash, spatial | B-tree, text search, geo-indexing
Performance | Great for read/write balance | Faster reads, simpler workloads | Great for high write throughput
Open Source | ✅ | ✅ | ✅ (with Enterprise options)










🔹 What is Normalization? Why is it needed?
Normalization is the process of organizing data in a database to reduce redundancy and improve data integrity.

✅ Why is it needed?
To eliminate data anomalies (insertion, update, deletion).
To reduce duplicate data.

✅ In 1NF if:
All values in a column are atomic (indivisible).
Each row is unique.

🔸 2NF (Second Normal Form)
Rule: 1NF + No partial dependency 
fix - split the table
🎓 Real-Life Example:
Consider this composite key table (StudentID + CourseID as Primary Key):
❌ Problem: StudentName depends only on StudentID, not on the full key.
convert this to   2NF by creating 3 table one for student detail , one for course details and other one for studentid and courseid 

🔸 3NF (Third Normal Form)
Rule: 2NF + No transitive dependency 
❌ DeptName depends on DeptID, which depends on StudentID. This is a transitive dependency.
create 2 table one for student+departid and other for department dt=etails 

🔸 BCNF (Boyce-Codd Normal Form)
Rule: Stronger version of 3NF.
For every functional dependency X → Y, X should be a super key.
📌 If a non-super key determines another attribute, it's not in BCNF.
✅ If all functional dependencies are from a super key, it's in BCNF.

🔍 Example:
Suppose in a table, Course → Instructor but Course is not a super key → ❌ Not BCNF.
We already separated that out in 3NF → ✅ So, it’s now also in BCNF.


🔹 What is Denormalization? When is it used?
Denormalization is the process of intentionally introducing redundancy into a database for performance optimization.
✅ When to use:
When read performance is more important than write consistency.
When a database is heavily read-intensive.
📌 Example: Instead of doing a JOIN across three tables to get StudentName and Instructor for a Course, you may just store everything in a single table to avoid joins.


🔹 What is a Functional Dependency?
A Functional Dependency (FD) is a relationship between two attributes, typically between a primary key and other attributes.
✅ Example:
StudentID → StudentName
Means if StudentID is the same in two rows, StudentName must also be the same.


🔹 CRUD Operations in SQL
CRUD = Create, Read, Update, Delete

✅ CREATE (INSERT)
INSERT INTO employees (id, name, department)
VALUES (101, 'Alice', 'HR');
🔍 READ (SELECT)
SELECT * FROM employees;
✏️ UPDATE
UPDATE employees
SET department = 'Finance'
WHERE id = 101;
❌ DELETE
DELETE FROM employees
WHERE id = 101;


✅ Nested SELECT (subqueries inside SELECT, FROM, or WHERE)

SELECT name, salary
FROM employees
WHERE salary > (
  SELECT AVG(salary) FROM employees
);

SELECT name,
  (SELECT department_name FROM departments WHERE departments.id = employees.department_id) AS dept_name
FROM employees;


🔹 What is a Transaction in DBMS?
A transaction is a sequence of operations (like read, write, update) performed as a single logical unit of work.
✅ Either all operations succeed (commit) or none (rollback).
💡 Example: Transferring money from A to B:
Debit from A
Credit to B
If one fails, the other must not proceed → Atomicity


🔹 ACID Properties
These are key properties that every transaction must satisfy:
Property | Description
🔹 A - Atomicity | All operations in a transaction are completed or none are.
🔹 C - Consistency | Transaction must maintain database rules/integrity before and after.
🔹 I - Isolation | Transactions occur independently, without affecting each other.
🔹 D - Durability | Once committed, changes persist even after a crash.

🔹 What are Locks in DBMS?
Locks restrict access to data by other transactions to maintain isolation.
🔒 Types of Locks:
Type | Description
Shared Lock (S) | For reading. Many can read together.
Exclusive Lock (X) | For writing. Only one can write; no other can read/write.
Binary Locks | Either locked or unlocked (0 or 1).
Intention Locks | Used in hierarchical locking (e.g., IS, IX, SIX).
Read-Write Locks | Fine-grained control (multiple readers, one writer).

🔹 What is a Deadlock?
A deadlock occurs when two or more transactions are waiting on each other’s resources and can’t proceed.

🔹 What are Indexes and Types of Indexing?
An index is a data structure (like a map or pointer) that speeds up data retrieval in a table.
Type | Description
Single-level Index | One index per data file (like a book’s table of contents).
Multi-level Index | Index on index for large datasets (hierarchical).
Dense Index | Index entry for every record in the file.
Sparse Index | Index entry for some records, with pointers to blocks.
Clustered Index | Data stored in the same order as the index. One per table.
Non-Clustered Index | Separate from actual data; can be many per table.
Composite Index | Index built on multiple columns.
Bitmap Index | Uses bitmaps for each distinct column value (great for categorical/low-cardinality data).

🔹 What is Hashing in DBMS?
Hashing uses a hash function to map keys to storage locations (buckets).
Types of Hashing:
Static Hashing: Fixed number of buckets
Dynamic Hashing: Buckets grow/shrink as data changes (e.g., extendible or linear hashing)

🔹 What are B-Trees and B+ Trees?
These are balanced tree structures used for indexing in databases.
🌳 B-Trees:
All keys are stored in internal and leaf nodes
🌳 B+ Trees (enhanced B-Tree):
Only leaf nodes store actual data/records

📌 Attributes:
Properties that describe an entity.
Type | Example
Simple | Name, Age
Composite | Name → (First, Last)
Derived | Age (derived from DOB)
Multivalued | Phone Numbers (can be multiple)
Key Attribute | Uniquely identifies entity (e.g., RollNo)

🔹 What is a Relationship Set?
A relationship defines how two or more entities are related.
📌 Types of Relationships:
One-to-One (1:1)
One-to-Many (1:N)
Many-to-One (N:1)
Many-to-Many (M:N)

🔹 How to Convert an ER Diagram to Relational Schema?
Here’s a step-by-step guide to mapping ER components into tables:

✅ 1. When Normalization Hurts Performance
🔸 Highly normalized schemas may lead to:
Too many JOINs across small tables
Increased query complexity
Slower response time in read-heavy systems


✅ 3. Ensuring Data Consistency in Multi-User Environments
Techniques:

Use transactions (BEGIN, COMMIT, ROLLBACK)
Implement locking mechanisms (row-level, table-level)
Use isolation levels (Read Committed, Serializable)
Apply constraints (primary, foreign, unique, check)
Implement optimistic/pessimistic concurrency control

✅ 4. Common Performance Bottlenecks in Databases
❌ Missing or misused indexes
❌ Poor query design (SELECT *, nested subqueries)
❌ Lack of normalization (data duplication, inconsistency)
❌ High lock contention in concurrent environments
❌ Too many joins or unoptimized joins
❌ Excessive I/O or memory usage
❌ Not archiving old data (huge tables)

✅ 2. How to Optimize SQL Queries
Use indexes wisely
Avoid SELECT *
Use EXISTS instead of IN for subqueries
Use JOINs instead of nested SELECTs when possible
Normalize with care (balance performance vs integrity)
Analyze execution plans (EXPLAIN, ANALYZE)
Keep statistics and indexes up to date

✅ 6. Clustered vs Non-Clustered Indexes
Feature | Clustered Index | Non-Clustered Index
Storage Order | Sorts and stores data rows in the table itself | Separate from data rows
Number per Table | Only one allowed (as it defines row order) | Multiple can exist
Access Speed | Faster for range queries | Slightly slower, as extra lookup needed
Use Case | Primary key or frequently queried columns | Secondary columns, searching non-key data














🔢 1. Ranking Functions

SELECT name, salary,
  ROW_NUMBER() OVER (ORDER BY salary DESC) AS row_num,
  RANK() OVER (ORDER BY salary DESC) AS rnk,
  DENSE_RANK() OVER (ORDER BY salary DESC) AS dense_rnk
FROM employees;

| name    | salary | row\_num | rnk | dense\_rnk |
| ------- | ------ | -------- | --- | ---------- |
| Bob     | 9000   | 1        | 1   | 1          |
| Charlie | 9000   | 2        | 1   | 1          |
| Alice   | 8000   | 3        | 3   | 2          |
| David   | 7000   | 4        | 4   | 3          |
| Emma    | 6000   | 5        | 5   | 4          |

📈 2. Aggregate Window Functions

SELECT date, amount,
  MIN(amount) OVER (ORDER BY date) AS running_min,
  MAX(amount) OVER (ORDER BY date) AS running_max
FROM sales;

| date       | amount | running\_min | running\_max |
| ---------- | ------ | ------------ | ------------ |
| 2024-01-01 | 100    | 100          | 100          |
| 2024-01-02 | 150    | 100          | 150          |
| 2024-01-03 | 200    | 100          | 200          |
| 2024-01-04 | 50     | 50           | 200          |
| 2024-01-05 | 300    | 50           | 300          |

SELECT date, product, amount,
  SUM(amount) OVER (PARTITION BY product ORDER BY date) AS running_sum,
  MIN(amount) OVER (PARTITION BY product ORDER BY date) AS running_min,
  MAX(amount) OVER (PARTITION BY product ORDER BY date) AS running_max
FROM sales;


| date       | product | amount | running\_sum | running\_min | running\_max |
| ---------- | ------- | ------ | ------------ | ------------ | ------------ |
| 2024-01-01 | A       | 100    | 100          | 100          | 100          |
| 2024-01-02 | A       | 150    | 250          | 100          | 150          |
| 2024-01-03 | A       | 50     | 300          | 50           | 150          |
| 2024-01-01 | B       | 200    | 200          | 200          | 200          |
| 2024-01-02 | B       | 180    | 380          | 180          | 200          |

🔄 3. Value Comparison Functions

SELECT 
  date,
  product,
  amount,

  LAG(amount) OVER (PARTITION BY product ORDER BY date) AS prev_amount,
  LEAD(amount) OVER (PARTITION BY product ORDER BY date) AS next_amount,

  FIRST_VALUE(amount) OVER (PARTITION BY product ORDER BY date) AS first_amount,
  LAST_VALUE(amount) OVER (PARTITION BY product ORDER BY date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_amount,

  NTH_VALUE(amount, 2) OVER (PARTITION BY product ORDER BY amount ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS second_lowest_amount

FROM sales;

| date       | product | amount | prev\_amount | next\_amount | first\_amount | last\_amount | second\_lowest\_amount |
| ---------- | ------- | ------ | ------------ | ------------ | ------------- | ------------ | ---------------------- |
| 2024-01-01 | A       | 100    | NULL         | 150          | 100           | 200          | 150                    |
| 2024-01-02 | A       | 150    | 100          | 200          | 100           | 200          | 150                    |
| 2024-01-03 | A       | 200    | 150          | NULL         | 100           | 200          | 150                    |
| 2024-01-01 | B       | 120    | NULL         | 80           | 120           | 160          | 120                    |
| 2024-01-02 | B       | 80     | 120          | 160          | 120           | 160          | 120                    |
| 2024-01-03 | B       | 160    | 80           | NULL         | 120           | 160          | 120                    |

Get difference in salary between current and previous employee

SELECT name, salary,
  salary - LAG(salary) OVER (ORDER BY salary DESC) AS diff_from_prev
FROM employees;

Calculate moving average of sales over 3 months

SELECT date, sales,
  AVG(sales) OVER (ORDER BY date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS moving_avg
FROM sales_data;

| date       | sales | moving\_avg | Calculation           |
| ---------- | ----- | ----------- | --------------------- |
| 2024-01-01 | 100   | 100.0       | (100) / 1             |
| 2024-01-02 | 200   | 150.0       | (100 + 200) / 2       |
| 2024-01-03 | 300   | 200.0       | (100 + 200 + 300) / 3 |
| 2024-01-04 | 400   | 300.0       | (200 + 300 + 400) / 3 |
| 2024-01-05 | 500   | 400.0       | (300 + 400 + 500) / 3 |

WHICH COME BEFORE WINDOW FUNCTION AND WHAT COME AFTER WINDOW FUNCTIONS 

| Clause     | Can use `rn`?       |
| ---------- | ------------------- |
| `WHERE`    | ❌ No                |
| `GROUP BY` | ❌ No                |
| `HAVING`   | ❌ No                |
| `SELECT`   | ✅ Yes               |
| `ORDER BY` | ✅ Yes               |
| Subquery   | ✅ Use for filtering |

Products never ordered in last 30 days

SELECT p.product_id
FROM products p
LEFT JOIN orders o ON p.product_id = o.product_id AND o.order_date >= CURRENT_DATE - INTERVAL '30 days'
WHERE o.product_id IS NULL;

--LENGTH FUNCTION TO CALCULATE THE LENGTH OF THE TOTAL CHARCTER IN EACH ROW OF THE SPECIFIC COLOUM 
# Write your MySQL query statement below
select  tweet_id 
from Tweets
where length(content) > 15  


case related question 

SELECT
    machine_id,
    ROUND(AVG(end_time - start_time), 3) AS processing_time
FROM (
    SELECT
        machine_id,
        process_id,
        MAX(CASE WHEN activity_type = 'end' THEN timestamp END) AS end_time,
        MIN(CASE WHEN activity_type = 'start' THEN timestamp END) AS start_time
    FROM Activity
    GROUP BY machine_id, process_id
) AS durations
GROUP BY machine_id;


















